/*
 *	Copyright 2020-2021 Cufy
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *	    http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 */
package org.jamplate.gradle

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.file.SourceDirectorySet
import org.gradle.api.model.ObjectFactory
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.plugins.JavaPluginConvention
import org.gradle.api.tasks.SourceSet

import javax.inject.Inject

/**
 * The {@code jamplate} gradle plugin.
 *
 * @since 0.0.1 ~2020.09.15
 */
class JamplatePlugin implements Plugin<Project> {
	/**
	 * The {@link ObjectFactory} passed when constructing this class.
	 *
	 * @since 0.0.1 ~2020.09.15
	 */
	final ObjectFactory factory
	/**
	 * The {@link Project} passed when applying this plugin.
	 *
	 * @since 0.0.1 ~2020.09.15
	 */
	Project project

	@Inject
	JamplatePlugin(ObjectFactory factory) {
		this.factory = factory
	}

	@Override
	void apply(Project project) {
		this.project = project
		project.plugins.apply JavaPlugin

		project.extensions.add 'jamplate', JamplateExtension

		this.jam 'jamplate', 'main'
		this.jam 'jamplate', 'test'
	}

	/**
	 * Create a task that generates {@code java} code from {@code jamplate} code for the given source
	 * name {@code jam}. With the name of the given {@code taskName}. To be generated to the given {@code module}
	 * (like 'main' or 'test').
	 * <p>
	 * The given {@code input} file will be the directory where the sources will be read by the task.
	 * <p>
	 * The given {@code output} file will be where the task outputs the generated java code.
	 * <p>
	 * This method will make the given {@code sourceSet} compiles the sources generated by the task.
	 * <p>
	 * The given {@code taskName} will be the name of the task.
	 * <p>
	 * If the given {@code allJavaSource} is true, the IDE will treat the {@code jamplate} code as a
	 * {@code java} code.
	 *
	 * @param jam the name of the source folder.
	 * @param module the name of the module ('main', 'test', etc...).
	 * @param input the directory where the sources is located.
	 * @param output the directory to output to.
	 * @param sourceSet the sourceSet to be configured to compile the output.
	 * @param taskName the name of the task.
	 * @param allJavaSource true, will make IDEs treat the {@code jamplate} code as {@code java} code.
	 * @throws NullPointerException if teh given {@code jam} or {@code module} or {@code input} or {@code output}
	 * or {@code sourceSet} or {@code taskName} is null.
	 * @since 0.0.1 ~2020.09.15
	 */
	protected void jam(
			String jam,
			String module,
			File input = new File(project.projectDir, "src/$module/$jam"),
			File output = new File(project.buildDir, "jam/$module/java"),
			SourceSet sourceSet = project.convention.getPlugin(JavaPluginConvention).sourceSets.getByName(module),
			String taskName = "process${module.equalsIgnoreCase('main') ? '' : camelCase(module)}Jamplate",
			boolean allJavaSource = true
	) {
		Objects.requireNonNull(jam, "jam")
		Objects.requireNonNull(module, "module")
		Objects.requireNonNull(input, "input")
		Objects.requireNonNull(output, "output")
		Objects.requireNonNull(sourceSet, "sourceSet")
		Objects.requireNonNull(taskName, "taskName")

		if (input.directory) {
			//create new jamplates source set
			SourceDirectorySet jamSourceSet =
					factory
							.sourceDirectorySet(
									"${module}.jam",
									"Jamplate ${jam} extends Java ${module}"
							)
							.srcDir input

			//register the source set
			sourceSet.allSource.source jamSourceSet

			//register the source set as a java source
			if (allJavaSource)
				sourceSet.allJava.source jamSourceSet

			//register the folder containing the generated code as java source folder
			sourceSet.java.srcDir output

			//create the jamplate task
			project.tasks.create(taskName, ProcessJamplateTask) {
				JamplateExtension extension = project.extensions.getByType(JamplateExtension)
				it.input = input
				it.output = output
				it.defaultMemory = extension.defaultMemory
				it.memorySupplier = extension.memorySupplier
			}
			//make the java compile task run after the jamplate task
			project.tasks.named(sourceSet.compileJavaTaskName) {
				it.dependsOn taskName
			}
		}
	}

	/**
	 * Return the given {@code string} formatted as {@code camelCase}.
	 *
	 * @param string the string to be formatted as {@code camelCase}.
	 * @return the given {@code string} formatted as {@code camelCase}.
	 * @throws NullPointerException if the given {@code string} is null.
	 * @since 0.0.1 ~2020.09.15
	 */
	private static String camelCase(String string) {
		Objects.requireNonNull(string, "string")
		return string.length() <= 1 ?
			   string.toUpperCase() :
			   string.substring(0, 1)
					 .toUpperCase() +
			   string.substring(1, string.length())
					 .toLowerCase()
	}
}
